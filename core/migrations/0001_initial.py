# Generated by Django 2.2 on 2020-08-29 17:45

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ApiData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text="Text which must appear in returned questions' titles", max_length=255, verbose_name='Title')),
                ('body', models.CharField(blank=True, help_text="Text which must appear in returned questions' bodies.", max_length=1023)),
                ('q', models.CharField(blank=True, help_text='A free form text parameter, will match all question properties ', max_length=1023, verbose_name='q')),
                ('sort', models.CharField(choices=[('activity', 'Activity'), ('votes', 'Votes'), ('creation', 'Creation'), ('relevance', 'Relevance')], default='activity', max_length=20, verbose_name='Sort')),
                ('order', models.CharField(choices=[('desc', 'Descending'), ('asc', 'Ascending')], default='desc', help_text='order of data returned', max_length=20, verbose_name='Order')),
                ('closed', models.NullBooleanField(choices=[(None, ''), (True, 'True'), (False, 'False')], help_text='True to return only closed questions, false to return only open ones', verbose_name='closed')),
                ('accepted', models.NullBooleanField(choices=[(None, ''), (True, 'True'), (False, 'False')], help_text='True to return only questions with accepted answers', verbose_name='accepted')),
                ('views', models.PositiveIntegerField(blank=True, help_text='The minimum number of views returned questions must have.', null=True, verbose_name='views')),
                ('answers', models.PositiveIntegerField(blank=True, help_text='The minimum number of answers returned questions must have', null=True, verbose_name='Number of answers')),
                ('fromdate', models.DateField(blank=True, help_text='Return questions from date', null=True, verbose_name='From Date')),
                ('todate', models.DateField(blank=True, help_text='Returns question up to date', null=True, verbose_name='To Date')),
                ('notagged', models.CharField(blank=True, help_text='A semicolon delimited list of tags, none of which will be present on returned questions.', max_length=253, verbose_name='Not tagged')),
                ('tagged', models.CharField(blank=True, help_text='A semicolon delimited list of tags, to be present (at least one)', max_length=255, verbose_name='Tagged')),
                ('min_date', models.DateField(blank=True, null=True, verbose_name='min')),
                ('max_date', models.DateField(blank=True, null=True, verbose_name='max')),
                ('migrated', models.NullBooleanField(choices=[(None, ''), (True, 'True'), (False, 'False')], help_text='True to return only questions migrated away from a site', verbose_name='migrated')),
                ('notice', models.NullBooleanField(choices=[(None, ''), (True, 'True'), (False, 'False')], help_text='True to return only questions with post notices', verbose_name='Notice')),
                ('user', models.PositiveIntegerField(blank=True, help_text='The id of the user who must own the questions returned.', null=True, verbose_name='Id of user')),
                ('url', models.CharField(blank=True, help_text='A url which must be contained in a post, may include a wildcard.', max_length=255, verbose_name='url')),
                ('wiki', models.NullBooleanField(choices=[(None, ''), (True, 'True'), (False, 'False')], help_text='True to return only community wiki questions', verbose_name='wiki')),
                ('page', models.PositiveIntegerField(blank=True, help_text='Returns specified Page of result', null=True, verbose_name='Page number')),
                ('pagesize', models.PositiveIntegerField(blank=True, help_text='Number of pages to be returned', null=True, verbose_name='Page Size')),
            ],
            options={
                'verbose_name': 'ApiData',
                'verbose_name_plural': 'ApiDatas',
            },
        ),
    ]
